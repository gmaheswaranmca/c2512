==========================================================================================
Problem Statement
==========================================================================================
`Title:` Movie Ticket Booking Management System

`Objective:`  
Develop a menu-driven C++ program 
to manage a movie ticket booking system. 
The system should maintain data for movie ticket bookings, 
including ticket amounts, food amounts, and booking IDs. 
It should support CRUD operations 
to create, read, update, and delete booking records.

---

`Requirements:`  
The program should fulfill the following requirements:

1. `Data Storage:`  
   - Maintain three arrays in the `main` function:
     - `booking_ids[]` to store unique booking IDs.
     - `ticket_amounts[]` to store ticket amounts for each booking.
     - `food_amounts[]` to store food amounts for each booking.
   - Maintain an integer variable to track the total number of bookings.

2. `Operations:`  
   Implement the following operations as menu options:
   
   - `Create Booking:`
     - Add a new booking by accepting inputs for booking ID, ticket amount, and food amount.
     - Store the data in the respective arrays and increment the number of bookings.
     - Ensure that the maximum limit of bookings is not exceeded.
   
   - `Read/Display Bookings:`
     - Display all existing bookings in a formatted tabular format, showing:
       - Booking ID
       - Ticket Amount
       - Food Amount
     - If no bookings exist, display an appropriate message.

   - `Edit Booking by ID:`
     - Allow the user to search for a booking by its ID.
     - If the booking exists, display its details and allow the user to update the ticket amount and food amount.
     - If the booking does not exist, display an appropriate message.

   - `Delete Booking by ID:`
     - Allow the user to search for a booking by its ID.
     - If the booking exists, delete it by shifting all subsequent records to fill the gap and decrement the total number of bookings.
     - If the booking does not exist, display an appropriate message.

3. `Menu Navigation:`  
   - Present a menu with options to perform the above operations.
   - Allow the user to perform multiple operations in a session until they choose to exit.

4. `Error Handling:`  
   - Handle cases where the arrays are full during the creation of a booking.
   - Handle invalid booking IDs during edit or delete operations.

---

`Example Input and Output:`  
1. `Menu Options:`  
   ```
   1. Create Booking
   2. Display All Bookings
   3. Edit Booking
   4. Delete Booking
   5. Exit
   ```

2. `Sample Output for Displaying Bookings:`  
   ```
   ------------------------------------------------
   | Booking ID | Ticket Amount | Food Amount    |
   ------------------------------------------------
   | 101        | 250           | 150            |
   | 102        | 300           | 200            |
   ------------------------------------------------
   ```

3. `Sample Operation:`  
   `Edit Booking by ID:`  
   - Input: Booking ID = 101  
   - Output:  
     ```
     Current Details:
     Booking ID: 101, Ticket Amount: 250, Food Amount: 150
     Enter New Ticket Amount: 280
     Enter New Food Amount: 180
     Booking updated successfully!
     ```

---

`Constraints:`  
- Maximum number of bookings: 100.
- Booking IDs must be unique.

---

`Implementation Guidelines:`  
- Use appropriate functions for each operation 
(e.g., `createBooking`, `editBooking`, `displayBookings`, `deleteBooking`).
- Ensure modularity and clarity in the code for easy maintenance.
- Display messages for successful operations or any encountered errors.
- Follow coding standards.

- Here all the learning objectives on "programming fundamentals" 
to be used properly. You can add your own functionality as menus to 
meet the learning outcomes.



==========================================================================================
C++ implementation of the `Movie Ticket Booking Management System`
with Full Coding Standards
==========================================================================================

C++ Code 

```cpp
#include <iostream>
#include <iomanip>
using namespace std;

// Constants
const int MAX_BOOKINGS = 100;

// Function Prototypes
void createBooking(int booking_ids[], int ticket_amounts[], int food_amounts[], int &numBookings);
void displayBookings(const int booking_ids[], const int ticket_amounts[], const int food_amounts[], int numBookings);
int findBookingIndexById(const int booking_ids[], int numBookings, int id);
void editBooking(int booking_ids[], int ticket_amounts[], int food_amounts[], int numBookings);
void deleteBooking(int booking_ids[], int ticket_amounts[], int food_amounts[], int &numBookings);
void printMenu();

int main() {
    // Arrays to hold booking details
    int booking_ids[MAX_BOOKINGS] = {0};
    int ticket_amounts[MAX_BOOKINGS] = {0};
    int food_amounts[MAX_BOOKINGS] = {0};
    int numBookings = 0; // Counter for current bookings

    int choice; // User's menu choice

    do {
        printMenu(); // Display menu
        cout << "Enter your choice: ";
        cin >> choice;

        // Menu-driven functionality
        switch (choice) {
            case 1:
                createBooking(booking_ids, ticket_amounts, food_amounts, numBookings);
                break;
            case 2:
                displayBookings(booking_ids, ticket_amounts, food_amounts, numBookings);
                break;
            case 3:
                editBooking(booking_ids, ticket_amounts, food_amounts, numBookings);
                break;
            case 4:
                deleteBooking(booking_ids, ticket_amounts, food_amounts, numBookings);
                break;
            case 5:
                cout << "Exiting the system. Goodbye!\n";
                break;
            default:
                cout << "Invalid choice. Please enter a number between 1 and 5.\n";
        }
    } while (choice != 5);

    return 0;
}

// Function Definitions

/** 
 * @brief Prints the menu options to the console.
 */
void printMenu() {
    cout << "\n=== Movie Ticket Booking Management System ===\n";
    cout << "1. Create Booking\n";
    cout << "2. Display All Bookings\n";
    cout << "3. Edit Booking\n";
    cout << "4. Delete Booking\n";
    cout << "5. Exit\n";
}

/**
 * @brief Creates a new booking and stores details in arrays.
 * @param booking_ids Array of booking IDs.
 * @param ticket_amounts Array of ticket amounts.
 * @param food_amounts Array of food amounts.
 * @param numBookings Current number of bookings (will be incremented).
 */
void createBooking(int booking_ids[], int ticket_amounts[], int food_amounts[], int &numBookings) {
    if (numBookings >= MAX_BOOKINGS) {
        cout << "Error: Maximum booking limit reached.\n";
        return;
    }

    int id, ticketAmount, foodAmount;

    cout << "Enter Booking ID: ";
    cin >> id;

    // Ensure booking ID is unique
    if (findBookingIndexById(booking_ids, numBookings, id) != -1) {
        cout << "Error: Booking ID already exists. Please use a unique ID.\n";
        return;
    }

    cout << "Enter Ticket Amount: ";
    cin >> ticketAmount;
    cout << "Enter Food Amount: ";
    cin >> foodAmount;

    // Store the booking details
    booking_ids[numBookings] = id;
    ticket_amounts[numBookings] = ticketAmount;
    food_amounts[numBookings] = foodAmount;
    numBookings++;

    cout << "Booking created successfully.\n";
}

/**
 * @brief Displays all existing bookings in a tabular format.
 * @param booking_ids Array of booking IDs.
 * @param ticket_amounts Array of ticket amounts.
 * @param food_amounts Array of food amounts.
 * @param numBookings Current number of bookings.
 */
void displayBookings(const int booking_ids[], const int ticket_amounts[], const int food_amounts[], int numBookings) {
    if (numBookings == 0) {
        cout << "No bookings available to display.\n";
        return;
    }

    cout << "------------------------------------------------\n";
    cout << "| Booking ID | Ticket Amount | Food Amount    |\n";
    cout << "------------------------------------------------\n";
    for (int i = 0; i < numBookings; i++) {
        cout << "| " << setw(10) << booking_ids[i] << " | "
             << setw(13) << ticket_amounts[i] << " | "
             << setw(12) << food_amounts[i] << " |\n";
    }
    cout << "------------------------------------------------\n";
}

/**
 * @brief Finds the index of a booking by ID.
 * @param booking_ids Array of booking IDs.
 * @param numBookings Current number of bookings.
 * @param id Booking ID to search for.
 * @return Index of the booking if found, -1 otherwise.
 */
int findBookingIndexById(const int booking_ids[], int numBookings, int id) {
    for (int i = 0; i < numBookings; i++) {
        if (booking_ids[i] == id) {
            return i;
        }
    }
    return -1;
}

/**
 * @brief Edits an existing booking by ID.
 * @param booking_ids Array of booking IDs.
 * @param ticket_amounts Array of ticket amounts.
 * @param food_amounts Array of food amounts.
 * @param numBookings Current number of bookings.
 */
void editBooking(int booking_ids[], int ticket_amounts[], int food_amounts[], int numBookings) {
    int id;
    cout << "Enter Booking ID to edit: ";
    cin >> id;

    int index = findBookingIndexById(booking_ids, numBookings, id);
    if (index == -1) {
        cout << "Error: Booking ID not found.\n";
        return;
    }

    cout << "Current Details - Ticket Amount: " << ticket_amounts[index] 
         << ", Food Amount: " << food_amounts[index] << "\n";

    cout << "Enter New Ticket Amount: ";
    cin >> ticket_amounts[index];
    cout << "Enter New Food Amount: ";
    cin >> food_amounts[index];

    cout << "Booking updated successfully.\n";
}

/**
 * @brief Deletes an existing booking by ID.
 * @param booking_ids Array of booking IDs.
 * @param ticket_amounts Array of ticket amounts.
 * @param food_amounts Array of food amounts.
 * @param numBookings Current number of bookings (will be decremented).
 */
void deleteBooking(int booking_ids[], int ticket_amounts[], int food_amounts[], int &numBookings) {
    int id;
    cout << "Enter Booking ID to delete: ";
    cin >> id;

    int index = findBookingIndexById(booking_ids, numBookings, id);
    if (index == -1) {
        cout << "Error: Booking ID not found.\n";
        return;
    }

    // Shift data to fill the gap
    for (int i = index; i < numBookings - 1; i++) {
        booking_ids[i] = booking_ids[i + 1];
        ticket_amounts[i] = ticket_amounts[i + 1];
        food_amounts[i] = food_amounts[i + 1];
    }
    numBookings--;

    cout << "Booking deleted successfully.\n";
}
```

---

Key Points:
1. `Menu-Driven Program:` 
    - Prompts the user for options and processes them until the user chooses to exit.
2. `CRUD Operations:` 
    - Supports creating, reading, updating, and deleting bookings.
3. `Error Handling:` 
    - Manages cases like invalid booking IDs or exceeding the maximum limit of bookings.
4. `Formatted Display:` 
    - Presents booking data in a readable table format.
5. `Input Validation:`
   - Ensures unique booking IDs.
   - Checks for boundary conditions (e.g., maximum bookings).
6. `Well-Documented Functions:`
   - Clear documentation using comments for every function.
   - Modular design for readability and maintainability.
7. `No Exception Handling:` 
   - Simple error messages for invalid inputs.
8. `Clarity and Consistency:` 
   - Adheres to good coding practices like meaningful variable names and formatted output.


