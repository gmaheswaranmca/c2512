1.`Machine Language`
   -`Definition`: The lowest-level programming language, consisting of binary code (0s and 1s) that the computer's hardware can directly execute.
   -`Characteristics`: Machine-dependent, difficult for humans to read or write, fast execution.
   -`Use`: Mainly used by system developers or hardware specialists.

2.`Assembly Language and Assembler`
   -`Assembly Language`: A low-level programming language that uses symbolic names instead of binary instructions, making it slightly easier to read and write than machine code.
   -`Assembler`: A program that translates assembly language into machine code.
   -`Characteristics`: Still hardware-specific, but more readable than machine language. Used for tasks requiring direct hardware control.

3.`Linker`
   -`Definition`: A software tool that combines multiple object files generated by a compiler or assembler into a single executable program.
   -`Function`: Resolves symbol references (like function names and variable addresses) and combines code and libraries for final execution.
   -`Importance`: Essential for creating complex programs that use multiple modules or libraries.

4.`High-Level Language, Interpreters, and Compilers`
   -`High-Level Language`: Programming languages like Python, Java, and C++ that are easier to read and write than machine or assembly languages and closer to human language.
   -`Interpreters`: Execute code line-by-line, translating high-level language to machine code at runtime. Example: Python interpreter.
   -`Compilers`: Translate entire high-level code into machine code before execution, creating an executable file. Example: C++ compiler.

5.`Problem-Solving Techniques`
   -`Definition`: Structured methods for identifying, analyzing, and solving problems effectively.
   -`Examples`: Breaking down complex problems, stepwise refinement, and using trial and error or brainstorming.

6.`Algorithm`
   -`Definition`: A step-by-step set of instructions for solving a particular problem or completing a task.
   -`Characteristics`: Algorithms should be clear, finite, and efficient, focusing on achieving a specific goal.
   -`Examples`: Sorting, searching, and pathfinding algorithms.

7.`Flowchart`
   -`Definition`: A visual representation of an algorithm or process, using symbols like arrows, rectangles, and diamonds to represent steps and decision points.
   -`Use`: Helps in planning, analyzing, and communicating algorithms or workflows.

8.`Pseudocode`
   -`Definition`: An informal, high-level description of an algorithm written in plain language mixed with programming-like syntax.
   -`Purpose`: To outline the structure of code without using specific syntax, allowing for easy translation to any programming language.
   -`Characteristics`: Focuses on logic and structure rather than language-specific details.

