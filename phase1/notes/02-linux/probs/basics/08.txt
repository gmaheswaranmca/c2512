Intermediate Level Problem Statement: 
C++ Program with Functions, Branching Statements, Loops, and Arrays

`Objective`:  
Create and manage a C++ program 
that utilizes functions, branching statements, loops, and arrays. 
The task also involves learning 
how to effectively use the `vi` editor 
for code writing and Linux commands 
for file management, compiling, and executing the program.

---

Problem Statement:

You are tasked with creating a C++ program 
that performs the following operations:

1. `Input & Store`:  
   - Take an array of 10 integers from the user.
   
2. `Functions`:  
   - Create a function `find_max` 
   that returns the maximum value from the array.
   - Create a function `find_min` 
   that returns the minimum value from the array.
   - Create a function `average` 
   that returns the average of the array elements.

3. `Branching Statements`:  
   - In the `main` function, use an `if` condition to check 
   if the average is greater than 50. 
   If so, display "The average is greater than 50". 
   Otherwise, display "The average is less than or equal to 50".

4. `Loops`:  
   - Use a `for` loop to iterate through the array and 
   calculate the sum of its elements.

5. `Output`:  
   - Print the array, the maximum value, 
   the minimum value, and the average.

---

Tasks:

1. `Create a C++ Project Directory`:
   - Create a directory named `cpp_array_program` 
   to store your C++ file.

2. `Navigate to the Directory`:
   - Use the `cd` command to navigate 
   into the `cpp_array_program` directory.

3. `Create the C++ Program File Using `vi``:
   - Use the `vi` editor 
   to create a file named `array_operations.cpp`.

4. `Write the C++ Program`:
   - Implement the program as described above 
   using the following template:

```cpp
#include <iostream>
using namespace std;

// Function to find the maximum value
int find_max(int arr[], int size) {
    int max = arr[0];
    for (int i = 1; i < size; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

// Function to find the minimum value
int find_min(int arr[], int size) {
    int min = arr[0];
    for (int i = 1; i < size; i++) {
        if (arr[i] < min) {
            min = arr[i];
        }
    }
    return min;
}

// Function to calculate the average
float average(int arr[], int size) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        sum += arr[i];
    }
    return static_cast<float>(sum) / size;
}

int main() {
    const int SIZE = 10;
    int arr[SIZE];
    
    // Taking array input from the user
    cout << "Enter 10 integers:" << endl;
    for (int i = 0; i < SIZE; i++) {
        cin >> arr[i];
    }
    
    // Calling functions
    int max_value = find_max(arr, SIZE);
    int min_value = find_min(arr, SIZE);
    float avg = average(arr, SIZE);
    
    // Displaying the results
    cout << "Array: ";
    for (int i = 0; i < SIZE; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    
    cout << "Maximum value: " << max_value << endl;
    cout << "Minimum value: " << min_value << endl;
    cout << "Average: " << avg << endl;
    
    // Conditional check
    if (avg > 50) {
        cout << "The average is greater than 50" << endl;
    } else {
        cout << "The average is less than or equal to 50" << endl;
    }
    
    return 0;
}
```

5. `Save and Exit the File`:
   - Save the file using `:w` and exit `vi` using `:q`.

6. `Compile the C++ Program`:
   - Use the `g++` command to compile the program:
     ```
     g++ -o array_operations array_operations.cpp
     ```

7. `Run the Compiled Program`:
   - Execute the program using the command:
     ```
     ./array_operations
     ```

8. `Verify Output`:
   - Enter 10 integers as prompted and verify 
   that the program correctly prints 
   the array, maximum value, minimum value, average, and 
   the conditional message based on the average.

9. `Edit the Program`:
   - Use `vi` to edit the program, 
   if necessary, and make any adjustments 
   like changing the array size or adding more features.

10. `Delete the Program File`:
    - Once you've completed the task, 
    delete the C++ program file:
      ```
      rm array_operations.cpp
      ```

11. `Remove the Project Directory`:
    - Check if the directory is empty and 
    remove it if necessary:
      ```
      rmdir cpp_array_program
      ```

---

Learning Outcomes:
By completing this task, you will:
- Practice using functions, loops, and branching statements in C++.
- Learn to work with arrays and calculate values like maximum, minimum, and average.
- Become familiar with basic file management using Linux commands (`cd`, `rm`, `rmdir`).
- Gain experience in writing, saving, and editing files with the `vi` editor.
- Learn how to compile and run C++ programs using `g++` on Linux.