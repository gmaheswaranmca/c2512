chmod dddd file_or_directory
      0000 [special bits] [user] [group] [other]     
      1111     [t][T]     [x/s/-]   [x/s/-]    [x/t/T/-]
      2222       [s]      [w/-]     [w/-]    [w/-]
      4444       [s]      [r/-]     [r/]    [r/-]

      chmod u+s file      SUID  or `s` Bit
      chmod 4777 file                             -rwsrwxrwx
          a special permission 
          that allows a file to be executed 
          with the `permissions of its owner`

                          
      chmod g+s sharedDir      SGID or `g` Bit
      chmod 2777 sharedDir                        drwxrwsrwx
        a special permission 
        that applies to `files` and `directories`. 
        It changes how files and directories are 
        accessed and interacted with by users

        useful 
        for collaborative work environments 
        where users share a group
        who are all sharing shared dir 

      chmod +t directory_name     sticky bit (or T bit)
      chmod 1777 directory_name                     drwxrwxrwt
      chmod 1776 directory_name                     drwxrwxrwT
        a special permission bit in Linux that applies to directories. 
        When set, 
        it ensures that only the owner of a file 
        within a directory can delete or rename that file, 
        even if other users have write access to the directory

        - `t`: Indicates both execute and sticky bit are set for others.
        - `T`: Indicates sticky bit is set, but execute is not.

1. `Grant all users execute permission`: chmod a+x script.sh
2. `Restrict file access to the owner only`: chmod 700 secret.txt
3. `Allow read/write for the owner, and read-only for others`: chmod 644 document.txt



In Linux, `file permissions` control 
who can read, write, or execute a file or directory. 

Permissions are managed 
using a combination of `user roles` and `access types`.

---

`1. User Roles`
Each file or directory has three types of roles:
1. `Owner`: The user who owns the file.
2. `Group`: A group of users who share access to the file.
3. `Others`: All other users on the system.

---

`2. Access Types`
There are three types of permissions:
1. `Read (r)`: Allows viewing the file's content or 
listing a directory's contents.
2. `Write (w)`: Allows modifying the file or its content, and 
creating/deleting files in a directory.
3. `Execute (x)`: Allows running the file as a program or 
accessing a directory.

---

`3. Viewing File Permissions`
Use the `ls -l` command to view file permissions:
```bash
ls -l filename
```

#Example Output:
```bash
-rwxr-xr--
```

`Breakdown of the Permissions:`
- `-` : File type (`-` for regular file, `d` for directory).
- `rwx` : Owner permissions (read, write, execute).
- `r-x` : Group permissions (read, no write, execute).
- `r--` : Others permissions (read only).

---

`4. Changing File Permissions`
Permissions can be modified using the `chmod` command.

#`Using Symbolic Notation`:
```bash
chmod u+x filename
```
- `u`: Owner (user).
- `g`: Group.
- `o`: Others.
- `a`: All (user, group, others).
- `+`: Add permission.
- `-`: Remove permission.
- `=`: Set exact permission.

`Example`:
- Add execute permission for the owner:
  ```bash
  chmod u+x file.txt
  ```

- Remove write permission for group:
  ```bash
  chmod g-w file.txt
  ```

#`Using Numeric Notation`:
Each permission is assigned a numeric value:
- `Read (r)` = 4
- `Write (w)` = 2
- `Execute (x)` = 1
- No permission = 0

Combine values to set permissions:
- `rwx` = 7 (4+2+1)
- `rw-` = 6 (4+2)
- `r--` = 4

`Syntax`:
```bash
chmod 754 filename
```

`Example`:
- `754` breakdown:
  - `7` = Owner (`rwx`).
  - `5` = Group (`r-x`).
  - `4` = Others (`r--`).

---

`5. Changing Ownership`
Use `chown` to change the owner or group of a file.

`Change the owner`:
```bash
chown new_owner filename
```

`Change the group`:
```bash
chown :new_group filename
```

`Change both owner and group`:
```bash
chown new_owner:new_group filename
```

---

`6. Changing Default Permissions`
Default permissions for newly created files and directories 
are controlled by the `umask` value.

View the current `umask`:
```bash
umask
```

Set a new `umask`:
```bash
umask 022
```

---

`Examples`
1. `Grant all users execute permission`:
   ```bash
   chmod a+x script.sh
   ```

2. `Restrict file access to the owner only`:
   ```bash
   chmod 700 secret.txt
   ```

3. `Allow read/write for the owner, and read-only for others`:
   ```bash
   chmod 644 document.txt
   ```

File permissions are critical 
for managing security and access control 
in Linux systems.


=============================================================================================

To `check all permissions` of a file in Linux, 
you can use several commands. 
Here’s how to do it:

---

`1. Using `ls -l` Command`
The `ls -l` command displays detailed information about a file, 
including its permissions.

`Syntax:`

```bash
ls -l <filename>
```

`Example:`

```bash
ls -l myfile.txt
```

`Output:`
```
-rw-r--r-- 1 user group 1024 Nov 29 12:00 myfile.txt
```

- `Breakdown:`
  - `-rw-r--r--`: Permissions
    - The first `-` indicates it’s a regular file (`d` if it’s a directory).
    - `rw-`: The owner (user) has `read` and `write` permissions.
    - `r--`: The group has `read-only` permission.
    - `r--`: Others (world) have `read-only` permission.
  - `1`: Number of links to the file.
  - `user`: The owner of the file.
  - `group`: The group associated with the file.
  - `1024`: File size in bytes.
  - `Nov 29 12:00`: Last modified date and time.

---

`2. Using `stat` Command`
The `stat` command provides detailed file information, 
including permissions in multiple formats.

`Syntax:`

```bash
stat <filename>
```

`Example:`

```bash
stat myfile.txt
```

`Output:`
```
  File: myfile.txt
  Size: 1024       Blocks: 8          IO Block: 4096 regular file
Device: 802h/2050d   Inode: 123456     Links: 1
Access: 2024-11-29 12:00:00.000000000 +0000
Modify: 2024-11-29 12:00:00.000000000 +0000
Change: 2024-11-29 12:00:00.000000000 +0000
 Birth: -
```

Key information includes:
- `Access`: Shows the file's access permissions.
- `Modify`: When the file content was last changed.
- `Change`: When metadata (like permissions) was last changed.

---

`3. Using `getfacl` (Advanced Permissions)`
The `getfacl` command checks both standard and `Access Control List (ACL)` permissions.

`Syntax:`

```bash
getfacl <filename>
```

`Example:`

```bash
getfacl myfile.txt
```

`Output:`
```
# file: myfile.txt
# owner: user
# group: group
user::rw-
group::r--
other::r--
```

---

`4. Using `lsattr` (Extended Attributes)`
To check if the file has extended attributes that may restrict actions like deletion:

`Syntax:`

```bash
lsattr <filename>
```

`Example:`

```bash
lsattr myfile.txt
```

`Output:`
```
----i-------- myfile.txt
```

- The `i` attribute means the file is `immutable` and cannot be modified or deleted.

---

`Explanation of Permission Symbols`

| Symbol | Meaning                     |
|--------|-----------------------------|
| `r`    | Read permission             |
| `w`    | Write permission            |
| `x`    | Execute permission          |
| `-`    | No permission               |
| `d`    | Directory (if present as first character) |

---

`Summary`

- Use `ls -l` for basic permission details.
- Use `stat` for detailed metadata.
- Use `getfacl` to check for extended permissions (ACL).
- Use `lsattr` to check extended attributes.



====================================================
Example 
```
-----Command-----
$ stat script02.sh

-----Output-----
  File: script02.sh
  Size: 120             Blocks: 0          IO Block: 512    regular file
Device: 30h/48d Inode: 8162774326256276  Links: 1
Access: (0777/-rwxrwxrwx)  Uid: (    0/    root)   Gid: (    0/    root)
Access: 2024-12-01 08:44:36.087878100 +0530
Modify: 2024-12-01 08:44:36.045898900 +0530
Change: 2024-12-01 08:44:36.045898900 +0530
 Birth: -
```

=========================================================================

The `chmod` command in Linux is used 
to `change file permissions` 
for the owner, group, and others. 
Permissions include `read (r)`, `write (w)`, and `execute (x)`.

---

`Basic Syntax`
```bash
chmod [options] mode file
```

---

`Permission Breakdown`

`Categories`
1. `Owner` (`u`)  
   The user who owns the file.
2. `Group` (`g`)  
   Users who belong to the file's group.
3. `Others` (`o`)  
   All other users.
4. `All` (`a`)  
   Applies to owner, group, and others.

`Permissions`
- `Read` (`r`): View file contents.
- `Write` (`w`): Modify file contents.
- `Execute` (`x`): Run the file as a program/script.

`Numeric Representation`
| Permission | Numeric Value |
|------------|---------------|
| `---`      | 0             |
| `--x`      | 1             |
| `-w-`      | 2             |
| `-wx`      | 3             |
| `r--`      | 4             |
| `r-x`      | 5             |
| `rw-`      | 6             |
| `rwx`      | 7             |

---

`Examples of `chmod` Use Cases`

`1. Setting Permissions Using Symbols`
- `Give execute permission to the owner:`
  ```bash
  chmod u+x file.sh
  ```
- `Remove write permission for others:`
  ```bash
  chmod o-w file.txt
  ```
- `Grant read permission to everyone:`
  ```bash
  chmod a+r file.txt
  ```
- `Set exact permissions (e.g., `rw-` for the owner, `r--` for others):`
  ```bash
  chmod u=rw,o=r file.txt
  ```

---

`2. Setting Permissions Using Numeric Values`
- `Full permissions for the owner, none for group and others:`
  ```bash
  chmod 700 script.sh
  ```
- `Read and execute for everyone, write for the owner:`
  ```bash
  chmod 755 file.txt
  ```
- `Read and write for the owner and group, none for others:`
  ```bash
  chmod 660 data.csv
  ```

---

`3. Recursive Permission Change`
- `Change permissions for all files and directories in a folder:`
  ```bash
  chmod -R 755 /path/to/directory
  ```

---

`4. Practical Use Cases`
- `Make a script executable:`
  ```bash
  chmod +x script.sh
  ```
- `Restrict access to sensitive files (e.g., `.env` files):`
  ```bash
  chmod 600 .env
  ```
- `Allow others to execute but not modify a program:`
  ```bash
  chmod 555 program
  ```

---

`Special Permissions`

`1. Set User ID (`s` bit)`
Allows a file to run with the permissions of its owner.
```bash
chmod u+s program
```

`2. Set Group ID (`g` bit)`
Allows files in a directory to inherit the group of the directory.
```bash
chmod g+s directory
```

`3. Sticky Bit (`t`)`
Prevents others from deleting files in a directory unless they own them.
```bash
chmod +t /tmp
```

---

`Tips and Notes`
1. `View Current Permissions:`
   ```bash
   ls -l file.txt
   ```
   Example output:
   ```
   -rw-r--r--  1 user group 1234 date file.txt
   ```
   - `rw-` → Owner can read and write.
   - `r--` → Group and others can only read.

2. `Default Permissions:`
   New files and directories have default permissions controlled by the `umask` value.

3. `Verify Changes:`
   After modifying permissions, verify using `ls -l`:
   ```bash
   ls -l file.txt
   ```

=========================================================================

`Set User ID (SUID or `s` Bit)`

The `Set User ID` (SUID) bit in Linux is a special permission 
that allows a file to be executed 
with the `permissions of its owner`, 
rather than the user who executes it.

---

`How SUID Works`
- Typically used on executable files.
- When a program with SUID is run, 
the process will have `temporary privileges` of the `file owner` (usually `root`) 
for the duration of execution.
- Common use case: Allow non-root users 
to execute programs that require elevated permissions.

---

`Setting SUID`
You can set the SUID bit using the `chmod` command.

`Symbolic Mode`
```bash
chmod u+s file
```

`Numeric Mode`
Add `4000` to the file's permission bits:
```bash
chmod 4755 file
```

---

`Checking SUID`
Use the `ls -l` command. 
The presence of an `s` 
in the owner's execute field indicates 
that the SUID bit is set.

```bash
ls -l file
```

`Example Output (SUID Set):`
```
-rwsr-xr-x  1 root root  1234 date file
```
- `rws`: `s` indicates SUID is enabled for the owner.
- The file will execute with the `root's privileges` (file owner).

---

`Examples`

`1. Without SUID`
If a program requires root permissions, 
running it as a regular user will fail.  
For example:
```bash
passwd
```
The `passwd` command requires root access to update `/etc/passwd`.

`2. With SUID`
When the `passwd` command is set with SUID:
```bash
ls -l /usr/bin/passwd
```
Output:
```
-rwsr-xr-x  1 root root  1234 /usr/bin/passwd
```
- The command runs with `root permissions` 
even when executed by a regular user.

---

`Security Implications`
- `Risks`: SUID can be exploited 
to gain unauthorized root access if the program is vulnerable.
- `Best Practices`:
  - Avoid setting SUID on custom scripts or untrusted programs.
  - Use `chmod u-s file` to remove the SUID bit when not needed.

---

`Removing SUID`
To remove the SUID bit:
```bash
chmod u-s file
```

---

`Common Use Cases`
1. `System Utilities` (e.g., `passwd`, `ping`, `sudo`):
   - These need elevated permissions but are usable by regular users.
2. `Special Scripts or Applications`:
   - Temporarily grant access to files or 
   actions without granting full `sudo` privileges.

=========================================================================

`Set Group ID (SGID or `g` Bit)`

The `Set Group ID` (SGID) bit in Linux is 
a special permission 
that applies to `files` and `directories`. 
It changes how files and directories are 
accessed and interacted with by users.

---

`How SGID Works`

1. `For Files`:
   - When a file with the SGID bit is executed, 
   the process will run 
   with the `permissions of the file's group` 
   instead of the user's primary group.

2. `For Directories`:
   - When SGID is set on a directory, 
   `new files created inside it inherit the directory's group` 
   rather than the user's primary group.  
   - This is useful 
   for collaborative work environments 
   where users share a group.

---

`Setting SGID`

#`Symbolic Mode`:
```bash
chmod g+s file_or_directory
```

#`Numeric Mode`:
Add `2000` to the file or directory's permission bits:
```bash
chmod 2755 file_or_directory
```

---

`Checking SGID`

Use `ls -l`. When the SGID bit is set:
- For `files`: An `s` appears in the group’s execute field.
- For `directories`: An `s` appears in the group’s execute field.

```bash
ls -l file_or_directory
```

`Example Output (SGID Set)`:
```
-rwxr-sr-x  1 user group  1234 file
drwxr-sr-x  2 user group  4096 directory
```

---

`Examples`

#`1. SGID on Files`
```bash
chmod g+s script.sh
```
Now, when anyone executes `script.sh`, 
the process will run 
with the `group permissions` of the file 
instead of the user's group.

---

#`2. SGID on Directories`
```bash
chmod g+s /shared_directory
```
- Any file or subdirectory created 
inside `/shared_directory` 
will inherit the `group ownership` of `/shared_directory`.

---

`Removing SGID`

To remove the SGID bit:
```bash
chmod g-s file_or_directory
```

---

`Use Cases`

#`1. Shared Directories`
- When multiple users collaborate, 
SGID ensures that all files 
in a shared directory are owned by the same group:
  ```bash
  mkdir /shared
  chgrp developers /shared
  chmod g+s /shared
  ```
- Any files created in `/shared` will belong to the `developers` group.

#`2. Group-Based Execution`
- Set SGID on a script or binary so it runs with the group's permissions:
  ```bash
  chmod g+s /usr/local/bin/myscript
  ```

---

`Security Implications`
- `For Files`:
  - Use SGID cautiously to avoid unintended privilege escalation.
- `For Directories`:
  - Helpful in collaboration but ensure proper group membership to avoid misuse.
  
=========================================================================

The sticky bit (or T bit) is 
a special permission bit in Linux that applies to directories. 
When set, 
it ensures that only the owner of a file 
within a directory can delete or rename that file, 
even if other users have write access to the directory.

---

Sticky Bit Details

- Symbol in File Permissions: 
  - Appears as a `t` or `T` 
  in the execute position of 
  the others section of a directory's permissions.
    - `t`: Indicates both execute and sticky bit are set for others.
    - `T`: Indicates sticky bit is set, but execute is not.

- Primary Use Case: 
  - Commonly used on shared directories like `/tmp`, 
  where multiple users have write access, 
  but they can only delete or modify their own files.

---

How to Set the Sticky Bit

1. Using `chmod`:
   - Set the sticky bit:
     ```bash
     chmod +t directory_name
     ```
   - Alternatively, set using octal mode (e.g., for `1777`):
     ```bash
     chmod 1777 directory_name
     ```

2. To Remove the Sticky Bit:
   - Remove the sticky bit:
     ```bash
     chmod -t directory_name
     ```
   - Using octal mode (e.g., for `0777`):
     ```bash
     chmod 0777 directory_name
     ```

---

How to Check for Sticky Bit

- Use `ls -ld` to view permissions:
  ```bash
  ls -ld /tmp
  ```
  Output:
  ```
  drwxrwxrwt 10 root root 4096 Dec  4 08:00 /tmp
  ```
  - `t` in the last position indicates the sticky bit is set.

---

Example Usage

#Without Sticky Bit:
1. Create a shared directory:
   ```bash
   mkdir shared_dir
   chmod 777 shared_dir
   ```
2. User A creates a file:
   ```bash
   touch shared_dir/file_A
   ```
3. User B deletes the file:
   ```bash
   rm shared_dir/file_A
   ```
   - This will succeed because write permission allows any user 
   to delete files in the directory.

---

#With Sticky Bit:
1. Enable the sticky bit:
   ```bash
   chmod +t shared_dir
   ```
2. User A creates a file:
   ```bash
   touch shared_dir/file_A
   ```
3. User B tries to delete the file:
   ```bash
   rm shared_dir/file_A
   ```
   - Permission Denied error occurs 
   because only the file's owner (User A) or 
   the root user can delete it.

---

Common Directories Using the Sticky Bit

1. `/tmp`:
   - Temporary files are stored here, accessible by all users.
   - Sticky bit ensures users cannot delete each other’s files.

2. Shared Project Folders:
   - Ensures integrity in directories with shared write access.

---

Sticky Bit vs Other Permission Bits

| Feature          | Behavior                                                                                     |
|-------------------|----------------------------------------------------------------------------------------------|
| Sticky Bit    | Prevents users from deleting files they don't own in shared writable directories.            |
| Setuid        | Allows executable files to run with the file owner's privileges (applies to executables).    |
| Setgid        | Ensures new files in a directory inherit the group's ownership from the directory.           |

=========================================================================