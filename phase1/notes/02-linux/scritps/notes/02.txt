---

`1. Introduction to Bash Shell`

The `Bash Shell` is a command-line interface used 
for interacting with the operating system. 
It's the default shell for most Linux and macOS distributions.

`Example`:
```bash
echo "Hello, Bash!"
```
This simply prints "Hello, Bash!" to the terminal.
---

`2. Using Variables`

Variables in Bash are used to store data. 
They can hold text, numbers, or results from commands. 
Variables in Bash do not require explicit type declaration.

`Example`:
```bash
#!/bin/bash
name="Alice"
echo "Hello, $name!"
```
- `name="Alice"`: This assigns the string "Alice" to the variable `name`.
- `echo "Hello, $name!"`: This prints "Hello, Alice!" to the terminal.

---

`3. Special Variables`

Bash has several `special variables` 
that provide information about the environment or command execution.

- `$?`: Exit status of the last command.
- `$$`: Process ID (PID) of the current script.
- `$0`: Name of the script.
- `$1`, `$2`, ..., `$n`: Positional parameters passed to the script.

`Example`:
```bash
#!/bin/bash
echo "The name of this script is $0"
echo "The exit status of the last command was $?"
echo "The current script's PID is $$"
```

---

`4. Using Arrays`

Arrays in Bash can hold multiple values. 
Array indexing starts from `0`.

`Example`:
```bash
#!/bin/bash
fruits=("apple" "banana" "cherry")
echo "First fruit: ${fruits[0]}"
echo "All fruits: ${fruits[@]}"
```
- `fruits=("apple" "banana" "cherry")`: This initializes an array called `fruits` with three values.
- `${fruits[0]}`: Accesses the first element of the array (`apple`).
- `${fruits[@]}`: Prints all elements of the array.

---

`5. Basic Operators`

Bash supports several types of operators:
- `Arithmetic Operators`: `+`, `-`, `*`, `/`, `%`.
- `Relational Operators`: `-eq`, `-ne`, `-gt`, `-lt`, `-ge`, `-le`.
- `Logical Operators`: `&&` (AND), `||` (OR).

`Example`:
```bash
#!/bin/bash
num1=10
num2=5
sum=$((num1 + num2))
echo "Sum: $sum"
```
- `((num1 + num2))`: Performs arithmetic operations.

---

`6. Decision Making`

Bash provides `if`, `else`, `elif`, and `test` for decision-making.

`Example`:
```bash
#!/bin/bash
num=10
if [ $num -gt 5 ]; then
    echo "The number is greater than 5."
else
    echo "The number is not greater than 5."
fi
```
- `[ $num -gt 5 ]`: Tests if `num` is greater than 5.

---

`7. Shell Loops`

Bash supports three types of loops: `for`, `while`, and `until`.

#For Loop:
`Example`:
```bash
#!/bin/bash
for i in {1..5}; do
    echo "Iteration $i"
done
```
- Loops through numbers 1 to 5.

#While Loop:
`Example`:
```bash
#!/bin/bash
count=1
while [ $count -le 5 ]; do
    echo "Iteration $count"
    ((count++))
done
```
- Loops as long as the condition (`$count -le 5`) is true.

#Until Loop:
`Example`:
```bash
#!/bin/bash
count=1
until [ $count -gt 5 ]; do
    echo "Iteration $count"
    ((count++))
done
```
- Loops until the condition (`$count -gt 5`) is true.

---

`8. Loop Control`

Loop control statements are used to control the flow of loops:
- `break`: Exit the loop.
- `continue`: Skip the current iteration.

`Example`:
```bash
#!/bin/bash
for i in {1..5}; do
    if [ $i -eq 3 ]; then
        continue  # Skip when $i is 3
    fi
    echo "Iteration $i"
done
```
- `continue`: Skips iteration when `$i` is 3.
- `break`: Would exit the loop when `$i` equals 3.

---

`9. Quoting Mechanisms`

In Bash, there are three types of quotes: `single quotes`, `double quotes`, and `backticks`:
- `Single Quotes` (`'`): Everything inside is treated literally.
- `Double Quotes` (`"`): Allows variable expansion and escape sequences.
- `Backticks` (``): Used for command substitution (old style, prefer `$()`).

`Example`:
```bash
#!/bin/bash
name="Alice"
echo 'Hello $name'        # Output: Hello $name
echo "Hello $name"        # Output: Hello Alice
echo "Current date: $(date)"  # Executes the `date` command
```

---

`10. IO Redirections`

Bash allows you to redirect input and output using operators like `>`, `>>`, `<`, and `2>`.

- `>`: Redirects output to a file (overwrites).
- `>>`: Appends output to a file.
- `<`: Redirects input from a file.
- `2>`: Redirects error output to a file.

`Example`:
```bash
#!/bin/bash
echo "Hello, World!" > output.txt    # Redirects output to a file
echo "Another line" >> output.txt    # Appends output to the file
```

- `>` overwrites the file, `>>` appends to it.

---

`11. Shell Functions`

Functions in Bash allow you to group commands and reuse them.

`Example`:
```bash
#!/bin/bash
greet() {
    echo "Hello, $1!"
}

greet "Alice"  # Output: Hello, Alice!
```
- `greet()` defines the function.
- `$1` is the first argument passed to the function (`Alice`).

---

`12. Handling Options`

You can handle script options using `getopts`.

`Example`:
```bash
#!/bin/bash
while getopts "f:o:" opt; do
    case $opt in
        f) echo "Option -f with value $OPTARG";;
        o) echo "Option -o with value $OPTARG";;
        *) echo "Invalid option";;
    esac
done
```
- `-f` and `-o` are options, and `$OPTARG` contains their values.
- Run with: `./script.sh -f value1 -o value2`.

---

Summary of Concepts:
- `Variables` are used to store data.
- `Arrays` allow storage of multiple items.
- `Operators` are used for arithmetic and logical operations.
- `Decision Making` with `if`, `else`, `elif`.
- `Loops` (for, while, until) allow repeating tasks.
- `Loop Control` uses `break` and `continue` for managing loops.
- `Quoting` ensures correct handling of strings with special characters.
- `Redirections` manage input and output to/from files.
- `Functions` organize code into reusable blocks.
- `Options` with `getopts` allow argument parsing.

---

