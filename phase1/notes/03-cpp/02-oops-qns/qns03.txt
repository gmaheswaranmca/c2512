single inheritance with dynamic binding
=============================================================
one two dynamic/static objects of the Derived class 
pointed by base class pointer
and call all behaviours using Base class pointer 

Override Base Class behaviors to derived class.
Define constructors and destructors for all the classes 
Define all the fields as dynamic fields in each class 

If you use string, use c-string (don't use string class)
        ie. dynamic c-string [dynamic char array]
============================================================= Sana Team (1-5)
Example 1: `Shape and Rectangle`  | Ayisha 
- `Base Class:` `Shape`  
  - Fields: None  
  - Pure Virtual Behaviors: `calculateArea()`, `calculatePerimeter()`  
- `Derived Class:` `Rectangle`  
  - Fields: `length`, `breadth`  
Example 2: `Animal and Dog` | Nimisha
- `Base Class:` `Animal`  
  - Fields: `species`  
  - Pure Virtual Behaviors: `makeSound()`, `move()`  
- `Derived Class:` `Dog`  
  - Fields: `breed`  
Example 3: `Account and SavingsAccount` | Sana
- `Base Class:` `Account`  
  - Fields: `accountNumber`, `balance`  
  - Pure Virtual Behaviors: `deposit()`, `withdraw()`  
- `Derived Class:` `SavingsAccount`  
  - Fields: `interestRate`  
Example 4: `Device and Smartphone` | Vinayak 
- `Base Class:` `Device`  
  - Fields: `brand`, `model`  
  - Pure Virtual Behaviors: `powerOn()`, `powerOff()`  
- `Derived Class:` `Smartphone`  
  - Fields: `operatingSystem`  
Example 5: `Tool and Hammer` | Vishak
- `Base Class:` `Tool`  
  - Fields: `toolName`, `weight`  
  - Pure Virtual Behaviors: `use()`, `repair()`  
- `Derived Class:` `Hammer`  
  - Fields: `handleMaterial`  
============================================================= Josh Team (6-10)
Example 6: `Appliance and WashingMachine`
- `Base Class:` `Appliance`  
  - Fields: `brand`, `powerConsumption`  
  - Pure Virtual Behaviors: `turnOn()`, `turnOff()`  
- `Derived Class:` `WashingMachine`  
  - Fields: `drumCapacity`, `spinSpeed`  
Example 7: `Person and Teacher`
- `Base Class:` `Person`  
  - Fields: `name`, `age`  
  - Pure Virtual Behaviors: `introduce()`, `work()`  
- `Derived Class:` `Teacher`  
  - Fields: `subject`, `experienceYears`  
Example 8: `Plant and FloweringPlant`
- `Base Class:` `Plant`  
  - Fields: `height`, `type`  
  - Pure Virtual Behaviors: `photosynthesize()`, `grow()`  
- `Derived Class:` `FloweringPlant`  
  - Fields: `flowerColor`, `bloomSeason`  
Example 9: `Game and BoardGame`
- `Base Class:` `Game`  
  - Fields: `name`, `playerCount`  
  - Pure Virtual Behaviors: `startGame()`, `endGame()`  
- `Derived Class:` `BoardGame`  
  - Fields: `boardSize`, `piecesCount`  
Example 10: `Instrument and Guitar`
- `Base Class:` `Instrument`  
  - Fields: `type`, `material`  
  - Pure Virtual Behaviors: `play()`, `tune()`  
- `Derived Class:` `Guitar`  
  - Fields: `stringCount`, `electric`  
============================================================= Abel Team (11-16)  
Problem 11: `Vehicle and ElectricCar`
- `Base Class:` `Vehicle`  
  - Fields: `make`, `model`  
  - Pure Virtual Behaviors: `start()`, `stop()`.  
- `Derived Class:` `ElectricCar`  
Problem 12: `Media and AudioBook`
- `Base Class:` `Media`  
  - Fields: `title`, `creator`  
  - Pure Virtual Behaviors: `play()`, `pause()`.  
- `Derived Class:` `AudioBook`  
  - Fields: `narrator`, `length`  
Problem 13: `Tool and PowerDrill`
- `Base Class:` `Tool`  
  - Fields: `brand`, `weight`  
  - Pure Virtual Behaviors: `useTool()`, `maintainTool()`.  
- `Derived Class:` `PowerDrill`  
  - Fields: `drillSpeed`, `bitType`  
Problem 14: `Appliance and Refrigerator`
- `Base Class:` `Appliance`  
  - Fields: `brand`, `powerConsumption`  
  - Pure Virtual Behaviors: `turnOn()`, `turnOff()`.  
- `Derived Class:` `Refrigerator`  
  - Fields: `capacity`, `doorType`  
Problem 15: `Employee and Developer`
- `Base Class:` `Employee`  
  - Fields: `name`, `id`  
  - Pure Virtual Behaviors: `work()`, `takeBreak()`.  
- `Derived Class:` `Developer`  
  - Fields: `programmingLanguage`, `projects`  
Problem 16: `Shape and Circle`
- `Base Class:` `Shape`  
  - Fields: `color`, `borderWidth`  
  - Pure Virtual Behaviors: `draw()`, `calculateArea()`.  
- `Derived Class:` `Circle`  
  - Fields: `radius`  
