`Members of a Class in C++`

A `class member` in C++ refers 
to variables (data members) and functions (member functions) 
that belong to a class. 
Members can be classified based on their type and access. 
Below is a detailed explanation of all types of class members.

---

`1. Data Members`
These are variables defined within a class 
that hold the data specific to the object of the class.

Types of Data Members:
1. `Instance Variables (Non-Static Members):`
   - These variables belong to each object of the class. 
   - Every object has its own copy.
   - Defined without the `static` keyword.

   ```cpp
   class Example {
   public:
       int x;  // Instance variable
   };
   ```

2. `Static Variables (Class Variables):`
   - These variables belong to the class itself, not individual objects.
   - Only one copy of the static member exists for the class, shared by all objects.
   - Declared using the `static` keyword and initialized outside the class.

   ```cpp
   class Example {
   public:
       static int count;  // Static variable declaration
   };

   int Example::count = 0;  // Initialization outside the class
   ```

---

`2. Member Functions`
These are functions defined in a class to perform actions on data members.

Types of Member Functions:
1. `Instance Functions:`
   - Operate on instance variables.
   - Called using objects.

   ```cpp
   class Example {
   public:
       void display() {
           cout << "This is an instance function." << endl;
       }
   };
   ```

2. `Static Functions:`
   - Operate only on static data members.
   - Cannot access instance variables directly.
   - Declared using the `static` keyword.

   ```cpp
   class Example {
   public:
       static void showCount() {
           cout << "Static function called." << endl;
       }
   };
   ```

3. `Inline Functions:`
   - Defined inside the class body.
   - The compiler tries to replace the function call with its body to optimize execution.

   ```cpp
   class Example {
   public:
       void inlineFunction() {
           cout << "This is an inline function." << endl;
       }
   };
   ```

4. `Friend Functions:`
   - Not a member of the class but can access private and protected members.
   - Declared using the `friend` keyword.

   ```cpp
   class Example {
   private:
       int value;
   public:
       Example(int val) : value(val) {}
       friend void showValue(Example ex);
   };

   void showValue(Example ex) {
       cout << "Value: " << ex.value << endl;
   }
   ```

---

`3. Access Specifiers`
Access specifiers determine the accessibility of class members.

1. `Public Members:`
   - Can be accessed from anywhere.
   - Example:
     ```cpp
     class Example {
     public:
         int x;  // Public member
     };
     ```

2. `Private Members:`
   - Accessible only within the class.
   - Default access specifier if none is provided.
   - Example:
     ```cpp
     class Example {
     private:
         int x;  // Private member
     };
     ```

3. `Protected Members:`
   - Accessible within the class and its derived classes.
   - Example:
     ```cpp
     class Example {
     protected:
         int x;  // Protected member
     };
     ```

---

`4. Special Members`
1. `Constructors:`
   - Special functions that initialize an object.
   - Called automatically when an object is created.

   `Types of Constructors:`
   - `Default Constructor:` No parameters.
   - `Parameterized Constructor:` Takes arguments.
   - `Copy Constructor:` Creates a new object as a copy of an existing object.

   ```cpp
   class Example {
   public:
       Example() { cout << "Default constructor called." << endl; }
       Example(int x) { cout << "Parameterized constructor: " << x << endl; }
       Example(const Example &obj) { cout << "Copy constructor called." << endl; }
   };
   ```

2. `Destructor:`
   - Special function called when an object goes out of scope or is deleted.
   - Used for cleanup.
   - Defined using a tilde (`~`).

   ```cpp
   class Example {
   public:
       ~Example() { cout << "Destructor called." << endl; }
   };
   ```

3. `Operator Overloaded Functions:`
   - Functions that redefine the behavior of operators for class objects.
   - Example:
     ```cpp
     class Example {
     public:
         int value;
         Example operator+(const Example &obj) {
             Example temp;
             temp.value = this->value + obj.value;
             return temp;
         }
     };
     ```

---

`5. Constant Members`
1. `Constant Data Members:`
   - Declared using the `const` keyword.
   - Must be initialized at the time of object construction.

   ```cpp
   class Example {
   public:
       const int x;
       Example(int val) : x(val) {}  // Initialization using initializer list
   };
   ```

2. `Constant Member Functions:`
   - Do not modify any data members of the class.
   - Declared with the `const` keyword after the function name.

   ```cpp
   class Example {
   public:
       int value;
       void display() const {
           cout << "Constant function." << endl;
       }
   };
   ```

---

`6. Mutable Members`
- `mutable` members can be modified even in `const` objects.

```cpp
class Example {
public:
    mutable int value;
    void changeValue() const {
        value = 10;  // Allowed because of mutable
    }
};
```

---

`Summary`
- `Data Members:` Variables that store data (`static` or `instance`).
- `Member Functions:` Define the behavior of the class (`static`, `friend`, or inline).
- `Access Specifiers:` Control access (`public`, `private`, `protected`).
- `Special Members:` Constructors, destructors, operator overloads.
- `Constant and Mutable Members:` Provide immutability or exceptions for specific cases.

