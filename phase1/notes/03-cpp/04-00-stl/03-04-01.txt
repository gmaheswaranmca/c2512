`Concepts and Constraints in C++`

Modern C++ (starting from `C++20`) introduces `concepts` as 
a way to specify `constraints` on template arguments. 

This allows for clearer and more expressive generic programming 
by checking that types satisfy certain requirements at compile time.

---

`1. What Are Concepts?`

A `concept` is a compile-time predicate (a condition) 
that describes a set of requirements a type must satisfy 
to be used in a template. 

For example, if a template function is designed 
to work with types that are "addable" 
(support `operator+`), 
a concept can enforce this.

`Why Use Concepts?`
- `Improved error messages:` 
Clear diagnostics when template arguments don't meet the requirements.
- `Better readability:` 
Makes intent explicit.
- `Compile-time checks:` 
Ensures requirements are verified before code generation.

---

`2. Declaring and Using Concepts`

`Defining a Concept`
You can define a concept 
using the `concept` keyword.

```cpp
#include <concepts>
#include <iostream>

// A concept for "addable" types
template <typename T>
concept Addable = requires(T a, T b) {
    { a + b } -> std::same_as<T>; // Ensures the result is of type T
};
```

`Using a Concept`
Once defined, concepts can be used as constraints on template arguments.

```cpp
// A function constrained by the Addable concept
template <Addable T>
T add(T a, T b) {
    return a + b;
}

int main() {
    std::cout << add(3, 5) << '\n';        // Valid: int is Addable
    // std::cout << add("a", "b") << '\n'; // Error: std::string does not satisfy Addable
}
```

---

`3. Standard Concepts`

C++20 provides a set of predefined concepts in the `<concepts>` header.

Commonly Used Concepts
|------------------------------|------------------------------------------------------|-----------------------------------------|
| `Concept`                    | `Description`                                        | `Example`                               |
|------------------------------|------------------------------------------------------|-----------------------------------------|
| `std::same_as<T>`            | Requires the type to be exactly `T`.                 | `std::same_as<int>`                     |
| `std::convertible_to<T>`     | Requires implicit convertibility to type `T`.        | `std::convertible_to<double>`           |
| `std::integral`              | Requires the type to be an integral type (int, char).| `std::integral`                         |
| `std::floating_point`        | Requires the type to be a floating-point type.       | `std::floating_point`                   |
| `std::default_initializable` | Type must be default-constructible.                  | `std::default_initializable`            |
| `std::copyable`              | Type must be copyable.                               | `std::copyable`                         |
|------------------------------|------------------------------------------------------|-----------------------------------------|

---

`4. Using Constraints in Templates`

`1. With `requires` Clause`

A ``requires` clause` allows you to specify a constraint directly in a template declaration.

```cpp
#include <concepts>
#include <iostream>

// A function constrained by requires
template <typename T>
requires std::integral<T>// Requires T to be an integral type
T square(T value) {
    return value * value;
}

int main() {
    std::cout << square(5) << '\n'; // Valid: int is integral
    // std::cout << square(3.5) << '\n'; // Error: double is not integral
}
```

`2. Abbreviated Function Templates`

For convenience, you can use `abbreviated syntax`.

```cpp
#include <concepts>
#include <iostream>

// Abbreviated syntax for requiring integral type
std::integral auto square(std::integral auto value) {
    return value * value;
}

int main() {
    std::cout << square(10) << '\n'; // Valid: int is integral
}
```

---

`5. Combining Concepts`

You can combine concepts using logical operators like `and`, `or`, and `not`.

```cpp
#include <concepts>
#include <iostream>

// A concept for types that are integral or floating-point
template <typename T>
concept Numeric = std::integral<T> || std::floating_point<T>;

// A function constrained by the Numeric concept
template <Numeric T>
T add(T a, T b) {
    return a + b;
}

int main() {
    std::cout << add(3, 5) << '\n';   // Valid: int satisfies Numeric
    std::cout << add(3.5, 2.1) << '\n'; // Valid: double satisfies Numeric
}
```

---

`6. Custom Concepts: Examples`

`Example 1: Concept for Equality-Comparable Types`
```cpp
#include <concepts>
#include <iostream>

template <typename T>
concept EqualityComparable = requires(T a, T b) {
    { a == b } -> std::convertible_to<bool>;
};

template <EqualityComparable T>
bool areEqual(T a, T b) {
    return a == b;
}

int main() {
    std::cout << std::boolalpha << areEqual(5, 5) << '\n';  // true
    std::cout << areEqual("abc", "def") << '\n';            // false
}
```

`Example 2: Concept for Callable Objects`
```cpp
#include <concepts>
#include <iostream>

template <typename T>
concept Callable = requires(T f) {
    f(); // Must be callable with no arguments
};

template <Callable T>
void invoke(T func) {
    func();
}

int main() {
    invoke([]() { std::cout << "Lambda called!\n"; }); // Valid
    // invoke(42); // Error: int is not Callable
}
```

---

`7. Concept-Based Overloading`

You can use concepts to overload functions based on constraints.

```cpp
#include <concepts>
#include <iostream>

// Overload for integral types
void printType(std::integral auto value) {
    std::cout << value << " is an integral type\n";
}

// Overload for floating-point types
void printType(std::floating_point auto value) {
    std::cout << value << " is a floating-point type\n";
}

int main() {
    printType(5);      // Outputs: 5 is an integral type
    printType(3.14);   // Outputs: 3.14 is a floating-point type
}
```

---

`8. Benefits of Concepts`
1. `Improved Code Clarity`:
   - Makes template requirements explicit.
   - Improves readability and maintainability.

2. `Early Error Detection`:
   - Errors in constraints are caught at compile-time instead of during template instantiation.

3. `Simpler Overloading`:
   - Enables type-specific behavior with clear and concise syntax.

---

Summary:
- ``std::optional`` and ``std::variant`` 
add type safety and clarity 
for handling optional values and multiple types.
- `Concepts and constraints` in C++20 greatly 
enhance generic programming, 
providing clear and explicit ways 
to define requirements for template arguments. 
They improve code readability, 
enforce compile-time checks, and 
simplify error messages.

These tools combine to make modern C++ both safer and more expressive.