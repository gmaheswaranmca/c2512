In C++, 
templates allow you to write generic and reusable code. 
Templates are a powerful feature of C++ 
that let you define functions and classes 
that work with any data type.

1. `Function Template`
A function template allows you 
to write a single function 
that can handle different types of arguments.

```cpp
#include <iostream>
using namespace std;

template <typename T>
T add(T a, T b) {
    return a + b;
}

int main() {
    cout << "Sum of integers: " << add(3, 5) << endl;
    cout << "Sum of doubles: " << add(3.5, 2.5) << endl;
    return 0;
}
```

`Output:`
```
Sum of integers: 8
Sum of doubles: 6
```

2. `Class Template`
A class template allows you 
to create a blueprint for a class 
that can work with any data type.

```cpp
#include <iostream>
using namespace std;

template <class T>
class Box {
private:
    T value;
public:
    void setValue(T val) {
        value = val;
    }
    T getValue() {
        return value;
    }
};

int main() {
    Box<int> intBox;
    intBox.setValue(123);
    cout << "Integer value: " << intBox.getValue() << endl;

    Box<string> strBox;
    strBox.setValue("Hello, Templates!");
    cout << "String value: " << strBox.getValue() << endl;

    return 0;
}
```

`Output:`
```
Integer value: 123
String value: Hello, Templates!
```

3. `Template Specialization`
Template specialization allows you 
to customize the behavior of a template for a specific type.

```cpp
#include <iostream>
using namespace std;

template <class T>
class Box {
public:
    void printType() {
        cout << "Generic template" << endl;
    }
};

// Specialization for `int`
template <>
class Box<int> {
public:
    void printType() {
        cout << "Specialized template for int" << endl;
    }
};

int main() {
    Box<double> doubleBox;
    doubleBox.printType();

    Box<int> intBox;
    intBox.printType();

    return 0;
}
```

`Output:`
```
Generic template
Specialized template for int
```

4. `Template with Multiple Parameters`
You can use multiple template parameters in a single template definition.

```cpp
#include <iostream>
using namespace std;

template <typename T1, typename T2>
class Pair {
private:
    T1 first;
    T2 second;
public:
    Pair(T1 a, T2 b) : first(a), second(b) {}
    void display() {
        cout << "First: " << first << ", Second: " << second << endl;
    }
};

int main() {
    Pair<int, double> pair1(1, 3.14);
    pair1.display();

    Pair<string, int> pair2("Age", 25);
    pair2.display();

    return 0;
}
```

`Output:`
```
First: 1, Second: 3.14
First: Age, Second: 25
```

Key Points to Remember:
- Use `template <typename T>` or `template <class T>` 
to define templates (both are equivalent).
- Templates are instantiated at compile time, 
which can increase code size due to multiple instantiations.
- Templates are type-safe and allow you to write more flexible and reusable code.
- Use `template specialization` to define specific behavior for a certain type.